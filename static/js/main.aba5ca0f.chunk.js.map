{"version":3,"sources":["trends/Trend.tsx","trends/TrendsDashboards.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getTrendColor","trend","color","Trend","name","i","symbol","Card","CardHeader","title","Typography","variant","component","align","CardContent","TrendsDashboard","apeTrends","fullList","Object","values","sort","trendA","trendB","mentions","mostPopular","splice","console","log","useState","showFullList","setShowFullList","changeShowFullList","Grid","container","spacing","direction","justify","item","Button","onClick","style","height","map","possibleTrends","value","buy","hold","sell","width","xs","a","b","App","setApeTrends","loading","setLoading","fetchApeTrends","axios","get","data","useEffect","alignItems","backgroundColor","minHeight","src","alt","Link","href","target","CircularProgress","CardActions","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aba5ca0f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, CardHeader, Typography } from \"@material-ui/core\";\r\n\r\ntype TrendProps = {\r\n  name: string;\r\n  symbol: string;\r\n  trend: \"buy\" | \"hold\" | \"sell\";\r\n  i: number;\r\n};\r\n\r\nconst getTrendColor = (trend: \"buy\" | \"hold\" | \"sell\"): string => {\r\n  let color = \"\";\r\n\r\n  switch (trend) {\r\n    case \"buy\":\r\n      color = \"primary\";\r\n      break;\r\n    case \"hold\":\r\n      color = \"textSecondary\";\r\n      break;\r\n    case \"sell\":\r\n      color = \"error\";\r\n      break;\r\n  }\r\n  return color;\r\n};\r\n\r\nconst Trend: React.FC<TrendProps> = ({ name, trend, i, symbol }) => {\r\n  return (\r\n    <Card>\r\n      <CardHeader\r\n        title={\r\n          <>\r\n            <Typography\r\n              variant=\"h5\"\r\n              component=\"h1\"\r\n              align=\"left\"\r\n              color=\"primary\"\r\n            >\r\n              #{i}\r\n            </Typography>\r\n            <Typography variant=\"h4\" component=\"h1\" align=\"center\">\r\n              {name}\r\n            </Typography>\r\n            <Typography variant=\"caption\" component=\"p\" align=\"center\">\r\n              ${symbol}\r\n            </Typography>\r\n          </>\r\n        }\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"caption\" component=\"p\" align=\"center\">\r\n          TREND\r\n        </Typography>\r\n        <Typography\r\n          variant=\"h4\"\r\n          component=\"p\"\r\n          color={\r\n            getTrendColor(trend) as\r\n              | \"inherit\"\r\n              | \"initial\"\r\n              | \"primary\"\r\n              | \"secondary\"\r\n              | \"textPrimary\"\r\n              | \"textSecondary\"\r\n              | \"error\"\r\n              | undefined\r\n          }\r\n          align=\"center\"\r\n        >\r\n          {trend}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Trend;\r\n","import React, { useState } from \"react\";\r\nimport { Button, Grid } from \"@material-ui/core\";\r\nimport Trend from \"./Trend\";\r\nimport { IndicatorCollection } from \"ape-trends/dist/utils\";\r\n\r\ntype TrendsDashboardProps = {\r\n  apeTrends: IndicatorCollection;\r\n};\r\n\r\nconst TrendsDashboard: React.FC<TrendsDashboardProps> = ({ apeTrends }) => {\r\n  const fullList = Object.values(apeTrends).sort(\r\n    (trendA, trendB) => trendB.mentions - trendA.mentions\r\n  );\r\n  const mostPopular = Object.values(apeTrends)\r\n    .sort((trendA, trendB) => trendB.mentions - trendA.mentions)\r\n    .splice(0, 10);\r\n  console.log(mostPopular);\r\n  const [showFullList, setShowFullList] = useState<boolean>(false);\r\n\r\n  const changeShowFullList = (): void => setShowFullList(!showFullList);\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={2} direction=\"row\" justify=\"center\">\r\n        <Grid item>\r\n          <Button\r\n            variant=\"contained\"\r\n            color={showFullList ? \"default\" : \"primary\"}\r\n            onClick={changeShowFullList}\r\n          >\r\n            List most popular\r\n          </Button>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button\r\n            variant=\"contained\"\r\n            color={showFullList ? \"primary\" : \"default\"}\r\n            onClick={changeShowFullList}\r\n          >\r\n            List all\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <div style={{ height: \"2rem\" }} />\r\n      <Grid container spacing={2} direction=\"row\" justify=\"flex-start\">\r\n        {Object.values(showFullList ? fullList : mostPopular).map(\r\n          ({ name, symbol, buy, hold, sell }, i) => {\r\n            const possibleTrends = [\r\n              { name: \"buy\", value: buy },\r\n              { name: \"hold\", value: hold },\r\n              { name: \"sell\", value: sell },\r\n            ];\r\n            return (\r\n              <Grid item style={{ width: \"25%\", height: \"25%\" }} xs={6}>\r\n                <Trend\r\n                  name={name}\r\n                  symbol={symbol}\r\n                  trend={\r\n                    possibleTrends.sort((a, b) => b.value - a.value)[0].name as\r\n                      | \"buy\"\r\n                      | \"hold\"\r\n                      | \"sell\"\r\n                  }\r\n                  i={i + 1}\r\n                />\r\n              </Grid>\r\n            );\r\n          }\r\n        )}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TrendsDashboard;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  CardHeader,\r\n  CircularProgress,\r\n  Grid,\r\n  Link,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { IndicatorCollection } from \"ape-trends/dist/utils\";\r\nimport TrendsDashboard from \"./trends/TrendsDashboards\";\r\n\r\nconst App: React.FC = () => {\r\n  const [apeTrends, setApeTrends] = useState<IndicatorCollection | undefined>();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n\r\n  const fetchApeTrends = async (): Promise<void> => {\r\n    const { data: apeTrends } = await axios.get<IndicatorCollection>(\r\n      \"https://plume-smart-milkshake.glitch.me\"\r\n    );\r\n    setApeTrends(apeTrends);\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!apeTrends) {\r\n      fetchApeTrends();\r\n    }\r\n  });\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n      style={{ backgroundColor: \"black\", minHeight: \"100vh\" }}\r\n      spacing={2}\r\n    >\r\n      <Grid item>\r\n        <Card style={{ backgroundColor: \"black\" }}>\r\n          <CardHeader\r\n            title={\r\n              <Card>\r\n                <Grid\r\n                  container\r\n                  justify=\"center\"\r\n                  alignItems=\"center\"\r\n                  direction=\"column\"\r\n                >\r\n                  <Grid item>\r\n                    <Typography variant=\"h5\" component=\"h1\" align=\"center\">\r\n                      APE TRENDS\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <img\r\n                      src=\"https://upload.wikimedia.org/wikipedia/commons/6/6f/Editorial_cartoon_depicting_Charles_Darwin_as_an_ape_%281871%29.jpg\"\r\n                      width=\"128px\"\r\n                      alt=\"OG APE\"\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Card>\r\n            }\r\n          />\r\n          <CardContent>\r\n            <Card>\r\n              <Typography variant=\"h5\" component=\"h2\" align=\"center\">\r\n                Want to know how often strangers on the internet mention\r\n                buying/selling/holding a crypto currency?\r\n              </Typography>\r\n              <Typography variant=\"body1\" component=\"h2\" align=\"center\">\r\n                Look no further, we can get you all the data you need to make\r\n                incredibly poor decisions.\r\n              </Typography>\r\n              <Typography variant=\"body1\" component=\"h2\" align=\"center\">\r\n                That is if that data can be found on{\" \"}\r\n                <Link\r\n                  href=\"https://www.reddit.com/r/CryptoCurrency/\"\r\n                  component=\"a\"\r\n                  target=\"_blank\"\r\n                >\r\n                  r/CryptoCurrency.\r\n                </Link>\r\n              </Typography>\r\n              <Typography variant=\"caption\" component=\"h2\" align=\"center\">\r\n                Data from other subreddits and social media platforms might come\r\n                soon or never!\r\n              </Typography>\r\n            </Card>\r\n            <div style={{ height: \"2rem\" }} />\r\n            {loading || !apeTrends ? (\r\n              <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\r\n                <Grid item>\r\n                  <CircularProgress color=\"secondary\" />\r\n                </Grid>\r\n              </Grid>\r\n            ) : (\r\n              <TrendsDashboard apeTrends={apeTrends} />\r\n            )}\r\n          </CardContent>\r\n\r\n          <CardActions>\r\n            <Link\r\n              href=\"https://github.com/SmallScale/ape-trends\"\r\n              target=\"_blank\"\r\n              component=\"a\"\r\n            >\r\n              <Typography color=\"error\">Learn More</Typography>\r\n            </Link>\r\n          </CardActions>\r\n        </Card>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}