{"version":3,"sources":["trends/Trend.tsx","trends/TrendsDashboards.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getTrendColor","trend","color","Trend","name","i","symbol","Card","CardHeader","title","Typography","variant","component","align","CardContent","TrendsDashboard","apeTrends","Grid","container","spacing","direction","justify","Object","values","map","possibleTrends","value","buy","hold","sell","item","style","width","height","xs","sort","a","b","App","useState","setApeTrends","loading","setLoading","fetchApeTrends","axios","get","data","useEffect","alignItems","backgroundColor","src","alt","CircularProgress","CardActions","Button","size","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.953922e7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, CardHeader, Typography } from \"@material-ui/core\";\r\n\r\ntype TrendProps = {\r\n  name: string;\r\n  symbol: string;\r\n  trend: \"buy\" | \"hold\" | \"sell\";\r\n  i: number;\r\n};\r\n\r\nconst getTrendColor = (trend: \"buy\" | \"hold\" | \"sell\"): string => {\r\n  let color = \"\";\r\n\r\n  switch (trend) {\r\n    case \"buy\":\r\n      color = \"primary\";\r\n      break;\r\n    case \"hold\":\r\n      color = \"textSecondary\";\r\n      break;\r\n    case \"sell\":\r\n      color = \"error\";\r\n      break;\r\n  }\r\n  return color;\r\n};\r\n\r\nconst Trend: React.FC<TrendProps> = ({ name, trend, i, symbol }) => {\r\n  return (\r\n    <Card>\r\n      <CardHeader\r\n        title={\r\n          <>\r\n            <Typography\r\n              variant=\"h5\"\r\n              component=\"h1\"\r\n              align=\"left\"\r\n              color=\"primary\"\r\n            >\r\n              #{i}\r\n            </Typography>\r\n            <Typography variant=\"h4\" component=\"h1\" align=\"center\">\r\n              {name}\r\n            </Typography>\r\n            <Typography variant=\"caption\" component=\"p\" align=\"center\">\r\n              ${symbol}\r\n            </Typography>\r\n          </>\r\n        }\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"caption\" component=\"p\" align=\"center\">\r\n          TREND\r\n        </Typography>\r\n        <Typography\r\n          variant=\"h4\"\r\n          component=\"p\"\r\n          color={\r\n            getTrendColor(trend) as\r\n              | \"inherit\"\r\n              | \"initial\"\r\n              | \"primary\"\r\n              | \"secondary\"\r\n              | \"textPrimary\"\r\n              | \"textSecondary\"\r\n              | \"error\"\r\n              | undefined\r\n          }\r\n          align=\"center\"\r\n        >\r\n          {trend}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Trend;\r\n","import React from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport Trend from \"./Trend\";\r\nimport { IndicatorCollection } from \"ape-trends/dist/utils\";\r\n\r\ntype TrendsDashboardProps = {\r\n  apeTrends: IndicatorCollection;\r\n};\r\n\r\nconst TrendsDashboard: React.FC<TrendsDashboardProps> = ({ apeTrends }) => {\r\n  return (\r\n    <Grid container spacing={2} direction=\"row\" justify=\"center\">\r\n      {Object.values(apeTrends).map(({ name, symbol, buy, hold, sell }, i) => {\r\n        const possibleTrends = [\r\n          { name: \"buy\", value: buy },\r\n          { name: \"hold\", value: hold },\r\n          { name: \"sell\", value: sell },\r\n        ];\r\n        return (\r\n          <Grid item style={{ width: \"25%\", height: \"25%\" }} xs={6}>\r\n            <Trend\r\n              name={name}\r\n              symbol={symbol}\r\n              trend={\r\n                possibleTrends.sort((a, b) => b.value - a.value)[0].name as\r\n                  | \"buy\"\r\n                  | \"hold\"\r\n                  | \"sell\"\r\n              }\r\n              i={i + 1}\r\n            />\r\n          </Grid>\r\n        );\r\n      })}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default TrendsDashboard;\r\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  CircularProgress,\n  Grid,\n  Typography,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { IndicatorCollection } from \"ape-trends/dist/utils\";\nimport TrendsDashboard from \"./trends/TrendsDashboards\";\n\nconst App: React.FC = () => {\n  const [apeTrends, setApeTrends] = useState<IndicatorCollection | undefined>();\n  const [loading, setLoading] = useState<boolean>(true);\n\n  const fetchApeTrends = async (): Promise<void> => {\n    const { data: apeTrends } = await axios.get<IndicatorCollection>(\n      \"http://localhost:5000\"\n    );\n    setApeTrends(apeTrends);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchApeTrends();\n  });\n\n  return (\n    <Grid\n      container\n      justify=\"center\"\n      alignItems=\"center\"\n      style={{ backgroundColor: \"black\" }}\n      spacing={2}\n    >\n      <Grid item>\n        <Card style={{ backgroundColor: \"black\" }}>\n          <CardHeader\n            title={\n              <Card>\n                <Grid\n                  container\n                  justify=\"center\"\n                  alignItems=\"center\"\n                  direction=\"column\"\n                >\n                  <Grid item>\n                    <Typography variant=\"h5\" component=\"h1\" align=\"center\">\n                      APE TRENDS\n                    </Typography>\n                  </Grid>\n                  <Grid item>\n                    <img\n                      src=\"https://upload.wikimedia.org/wikipedia/commons/6/6f/Editorial_cartoon_depicting_Charles_Darwin_as_an_ape_%281871%29.jpg\"\n                      width=\"128px\"\n                      alt=\"OG APE\"\n                    />\n                  </Grid>\n                </Grid>\n              </Card>\n            }\n          />\n          <Typography variant=\"h5\" component=\"h2\" align=\"center\">\n            COINS\n          </Typography>\n          <CardContent>\n            {loading || !apeTrends ? (\n              <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\n                <Grid item>\n                  <CircularProgress color=\"secondary\" />\n                </Grid>\n              </Grid>\n            ) : (\n              <TrendsDashboard apeTrends={apeTrends} />\n            )}\n          </CardContent>\n\n          <CardActions>\n            <Button size=\"small\">Learn More</Button>\n          </CardActions>\n        </Card>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}